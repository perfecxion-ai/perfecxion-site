const fs = require('fs');
const path = require('path');

// Function to fix final remaining broken formulas
function fixFinalFormulas(content) {
    // Fix broken subscript notation with line breaks
    content = content.replace(/x \n 2 /g, 'x‚ÇÇ');
    content = content.replace(/x \n max /g, 'x_max');
    content = content.replace(/x \n min /g, 'x_min');
    content = content.replace(/n \n 0 ,n \n 1 ,‚Ä¶,n/g, 'n‚ÇÄ, n‚ÇÅ, ‚Ä¶, n');
    content = content.replace(/L n \n l‚àí1 ‚ãÖn/g, 'L n‚Çó‚Çã‚ÇÅ ¬∑ n');

    // Fix broken Q function notation
    content = content.replace(/Q \n œÄ/g, 'Q^œÄ');
    content = content.replace(/Q \n ‚àó/g, 'Q^*');

    // Fix broken V function notation
    content = content.replace(/V \n œÄ/g, 'V^œÄ');

    // Fix broken similarity notation
    content = content.replace(/Similarity \n Left /g, 'Similarity_Left');
    content = content.replace(/Similarity \n Right /g, 'Similarity_Right');
    content = content.replace(/Similarity \n Root/g, 'Similarity_Root');

    // Fix broken feature notation
    content = content.replace(/X \n 1 ,‚Ä¶,X \n d /g, 'X‚ÇÅ, ‚Ä¶, X_d');
    content = content.replace(/Y \n 1 ,‚Ä¶,Y \n d /g, 'Y‚ÇÅ, ‚Ä¶, Y_d');
    content = content.replace(/Z \n jk =Y \n j √óY/g, 'Z_jk = Y_j √ó Y');

    // Fix broken complexity notation
    content = content.replace(/O\(N \n 2\)/g, 'O(N¬≤)');
    content = content.replace(/O\(N \n 3\)/g, 'O(N¬≥)');
    content = content.replace(/O\(n \n 2\)/g, 'O(n¬≤)');
    content = content.replace(/O\(n \n 3\)/g, 'O(n¬≥)');
    content = content.replace(/O\(p \n 2\)/g, 'O(p¬≤)');
    content = content.replace(/O\(p \n 3\)/g, 'O(p¬≥)');

    // Fix broken matrix notation
    content = content.replace(/N√óN/g, 'N√óN');
    content = content.replace(/n√ón/g, 'n√ón');
    content = content.replace(/n√óp/g, 'n√óp');

    // Fix broken mathematical expressions
    content = content.replace(/P\(X‚à£y\)=P\(x‚ÇÅ,x \n 2 ,‚Ä¶,x/g, 'P(X|y) = P(x‚ÇÅ, x‚ÇÇ, ‚Ä¶, x');

    // Fix broken Z matrix notation
    content = content.replace(/Z \n l /g, 'Z‚Çó');
    content = content.replace(/Z \n 1 /g, 'Z‚ÇÅ');
    content = content.replace(/Z \n 2 /g, 'Z‚ÇÇ');

    // Fix broken partial derivative notation
    content = content.replace(/‚àÇZ \n l /g, '‚àÇZ‚Çó');
    content = content.replace(/‚àÇZ \n 1 /g, '‚àÇZ‚ÇÅ');
    content = content.replace(/‚àÇZ \n 2 /g, '‚àÇZ‚ÇÇ');

    // Fix broken mathematical expressions with line breaks
    content = content.replace(/\n \n /g, ' ');
    content = content.replace(/\n \n /g, ' ');

    return content;
}

// Function to process all MDX files
function processAllFiles() {
    const mlDir = path.join(__dirname, '../content/knowledge/machine-learning');

    function processDirectory(dir) {
        const items = fs.readdirSync(dir);

        for (const item of items) {
            const fullPath = path.join(dir, item);
            const stat = fs.statSync(fullPath);

            if (stat.isDirectory()) {
                processDirectory(fullPath);
            } else if (item.endsWith('.mdx')) {
                console.log(`Processing: ${fullPath}`);

                try {
                    let content = fs.readFileSync(fullPath, 'utf8');
                    const originalContent = content;

                    content = fixFinalFormulas(content);

                    if (content !== originalContent) {
                        fs.writeFileSync(fullPath, content, 'utf8');
                        console.log(`  ‚úÖ Fixed final formulas in: ${item}`);
                    } else {
                        console.log(`  ‚ÑπÔ∏è  No changes needed: ${item}`);
                    }
                } catch (error) {
                    console.error(`  ‚ùå Error processing ${item}:`, error.message);
                }
            }
        }
    }

    processDirectory(mlDir);
    console.log('\nüéâ Final formula cleanup complete!');
}

// Run the script
if (require.main === module) {
    processAllFiles();
}

module.exports = { fixFinalFormulas };
