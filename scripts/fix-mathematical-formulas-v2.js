const fs = require('fs');
const path = require('path');

// Function to fix broken mathematical formulas - improved version
function fixMathematicalFormulasV2(content) {
  // Fix broken spacing and line breaks in formulas
  content = content.replace(/D‚ÇÅ\(i\) = 1\/N\n for i=1,...,N/g, '**D‚ÇÅ(i) = 1/N** for **i = 1, ..., N**');
  
  // Fix broken D‚Çú notation
  content = content.replace(/D \n t /g, 'D‚Çú');
  content = content.replace(/D‚Çú\(i\) is the weight of sample i at iteration t/g, '**D‚Çú(i)** is the weight of sample **i** at iteration **t**');
  
  // Fix broken h‚Çú notation
  content = content.replace(/h‚Çú\(x\)‚Üí \{-1, \+1\}/g, '**h‚Çú(x) ‚Üí {-1, +1}**');
  content = content.replace(/h‚Çúis calculated/g, '**h‚Çú** is calculated');
  content = content.replace(/h‚Çúis calculated as the sum of the weights/g, '**h‚Çú** is calculated as the sum of the weights');
  
  // Fix broken œµ‚Çú notation
  content = content.replace(/œµ‚Çú = \nŒ£·µ¢‚Çå‚ÇÅ·¥∫\n D‚Çú\(i\)‚ãÖI\(h‚Çú\(x·µ¢\)\nÓÄ†\n=y·µ¢\)/g, '**œµ‚Çú = Œ£·µ¢‚Çå‚ÇÅ·¥∫ D‚Çú(i) ¬∑ I(h‚Çú(x·µ¢) ‚â† y·µ¢)**');
  content = content.replace(/œµ‚Çúis a value between 0 and 1/g, '**œµ‚Çú** is a value between 0 and 1');
  
  // Fix broken Œ±‚Çú notation
  content = content.replace(/Œ±‚Çú = \n¬Ω ln\( \nœµ‚Çú1‚àíœµ‚Çú‚Äã\n \)/g, '**Œ±‚Çú = ¬Ω ln(œµ‚Çú/(1-œµ‚Çú))**');
  content = content.replace(/Œ±‚Çúis proportional/g, '**Œ±‚Çú** is proportional');
  content = content.replace(/Œ±‚Çú = \n¬Ω ln\(1\)=0/g, '**Œ±‚Çú = ¬Ω ln(1) = 0**');
  content = content.replace(/Œ±‚Çú‚Üí‚àû/g, '**Œ±‚Çú ‚Üí ‚àû**');
  content = content.replace(/Œ±‚Çú‚Üí‚àí‚àû/g, '**Œ±‚Çú ‚Üí -‚àû**');
  
  // Fix broken D‚Çú‚Çä‚ÇÅ notation
  content = content.replace(/D \n t\+1 \(i\)= \nZ \n t D‚Çú\(i\)‚ãÖe \n‚àíy·µ¢Œ±‚Çúh‚Çú\(x·µ¢\)/g, '**D‚Çú‚Çä‚ÇÅ(i) = (1/Z‚Çú) D‚Çú(i) ¬∑ e^(-y·µ¢Œ±‚Çúh‚Çú(x·µ¢))**');
  content = content.replace(/where Z \n t is a normalization factor/g, 'where **Z‚Çú** is a normalization factor');
  content = content.replace(/Z \n t =‚àë \ni=1\nN D‚Çú\(i\)‚ãÖe \n‚àíy·µ¢Œ±‚Çúh‚Çú\(x·µ¢\)/g, '**Z‚Çú = Œ£·µ¢‚Çå‚ÇÅ·¥∫ D‚Çú(i) ¬∑ e^(-y·µ¢Œ±‚Çúh‚Çú(x·µ¢))**');
  
  // Fix broken H(x) notation
  content = content.replace(/H\(x\)=sign\( \nŒ£‚Çú‚Çå‚ÇÅ·µÄ\n Œ±‚Çúh‚Çú\(x\)\)/g, '**H(x) = sign(Œ£‚Çú‚Çå‚ÇÅ·µÄ Œ±‚Çúh‚Çú(x))**');
  
  // Fix broken learning rate formula
  content = content.replace(/H\(x\)=sign\(‚àë \nt=1\nT Œ∑Œ±‚Çúh‚Çú\(x\)\)/g, '**H(x) = sign(Œ£‚Çú‚Çå‚ÇÅ·µÄ Œ∑Œ±‚Çúh‚Çú(x))**');
  
  // Fix broken D‚Çú notation in text
  content = content.replace(/D \n t , influence/g, '**D‚Çú** influence');
  content = content.replace(/D \n t , is passed/g, '**D‚Çú** is passed');
  content = content.replace(/D \n t , is formed/g, '**D‚Çú** is formed');
  
  // Fix broken mathematical expressions
  content = content.replace(/y·µ¢h‚Çú\(x·µ¢\)=1/g, '**y·µ¢h‚Çú(x·µ¢) = 1**');
  content = content.replace(/y·µ¢h‚Çú\(x·µ¢\)=‚àí1/g, '**y·µ¢h‚Çú(x·µ¢) = -1**');
  content = content.replace(/e \n‚àíŒ±‚Çú/g, '**e^(-Œ±‚Çú)**');
  content = content.replace(/e \nŒ±‚Çú/g, '**e^(Œ±‚Çú)**');
  
  // Fix broken section headers
  content = content.replace(/Step 1: Initialize Sample Weights/g, '#### Step 1: Initialize Sample Weights');
  content = content.replace(/Step 2: Iterative Learning \(for t=1 to T\)/g, '#### Step 2: Iterative Learning (for t=1 to T)');
  content = content.replace(/Step 3: Final Prediction/g, '#### Step 3: Final Prediction');
  
  // Fix broken subsection headers
  content = content.replace(/a\. Train Weak Learner:/g, '**a. Train Weak Learner:**');
  content = content.replace(/b\. Calculate Weighted Error \(œµ‚Çú\):/g, '**b. Calculate Weighted Error (œµ‚Çú):**');
  content = content.replace(/c\. Calculate Classifier Importance \(Œ±‚Çú\):/g, '**c. Calculate Classifier Importance (Œ±‚Çú):**');
  content = content.replace(/d\. Update Sample Weights:/g, '**d. Update Sample Weights:**');
  content = content.replace(/e\. Normalize Weights:/g, '**e. Normalize Weights:**');
  
  // Fix broken section headers
  content = content.replace(/2\.3 The Role of Key Hyperparameters/g, '### 2.3 The Role of Key Hyperparameters');
  content = content.replace(/2\.4 The Iterative Training Process: Learning from Mistakes/g, '### 2.4 The Iterative Training Process: Learning from Mistakes');
  content = content.replace(/Section 3: Practical Implementation/g, '## Section 3: Practical Implementation');
  content = content.replace(/3\.1 Data Requirements and Preprocessing/g, '### 3.1 Data Requirements and Preprocessing');
  
  // Fix broken subsection headers
  content = content.replace(/Data Types:/g, '**Data Types:**');
  content = content.replace(/Preprocessing for Categorical Data:/g, '**Preprocessing for Categorical Data:**');
  
  // Fix broken mathematical notation in hyperparameters
  content = content.replace(/n_estimators: This integer parameter corresponds to T/g, '**n_estimators:** This integer parameter corresponds to **T**');
  content = content.replace(/learning_rate: This float parameter, often denoted as Œ∑/g, '**learning_rate:** This float parameter, often denoted as **Œ∑**');
  content = content.replace(/base_estimator \(or estimator\):/g, '**base_estimator (or estimator):**');
  
  // Fix broken mathematical expressions in explanations
  content = content.replace(/\(1‚àíœµ‚Çú\)\/œµ‚Çú/g, '**(1-œµ‚Çú)/œµ‚Çú**');
  content = content.replace(/œµ‚Çú =0\.5/g, '**œµ‚Çú = 0.5**');
  content = content.replace(/œµ‚Çú‚Üí0/g, '**œµ‚Çú ‚Üí 0**');
  content = content.replace(/œµ‚Çú‚Üí1/g, '**œµ‚Çú ‚Üí 1**');
  
  return content;
}

// Function to process all MDX files
function processAllFiles() {
  const mlDir = path.join(__dirname, '../content/knowledge/machine-learning');
  
  function processDirectory(dir) {
    const items = fs.readdirSync(dir);
    
    for (const item of items) {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        processDirectory(fullPath);
      } else if (item.endsWith('.mdx')) {
        console.log(`Processing: ${fullPath}`);
        
        try {
          let content = fs.readFileSync(fullPath, 'utf8');
          const originalContent = content;
          
          content = fixMathematicalFormulasV2(content);
          
          if (content !== originalContent) {
            fs.writeFileSync(fullPath, content, 'utf8');
            console.log(`  ‚úÖ Fixed formulas in: ${item}`);
          } else {
            console.log(`  ‚ÑπÔ∏è  No changes needed: ${item}`);
          }
        } catch (error) {
          console.error(`  ‚ùå Error processing ${item}:`, error.message);
        }
      }
    }
  }
  
  processDirectory(mlDir);
  console.log('\nüéâ Mathematical formula fixing V2 complete!');
}

// Run the script
if (require.main === module) {
  processAllFiles();
}

module.exports = { fixMathematicalFormulasV2 };
