const fs = require('fs');
const path = require('path');

// Function to fix broken mathematical formulas
function fixMathematicalFormulas(content) {
  // Fix broken subscript notation
  content = content.replace(/x\s*\n\s*1\s*\n\s*‚Äã\s*\n\s*/g, 'x‚ÇÅ');
  content = content.replace(/y\s*\n\s*1\s*\n\s*‚Äã\s*\n\s*/g, 'y‚ÇÅ');
  content = content.replace(/x\s*\n\s*N\s*\n\s*‚Äã\s*\n\s*/g, 'x·¥∫');
  content = content.replace(/y\s*\n\s*N\s*\n\s*‚Äã\s*\n\s*/g, 'y·¥∫');
  content = content.replace(/x\s*\n\s*i\s*\n\s*‚Äã\s*\n\s*/g, 'x·µ¢');
  content = content.replace(/y\s*\n\s*i\s*\n\s*‚Äã\s*\n\s*/g, 'y·µ¢');
  
  // Fix broken D notation
  content = content.replace(/D\s*\n\s*1\s*\n\s*‚Äã\s*\n\s*\(i\)=\s*\n\s*N\s*\n\s*1\s*\n\s*‚Äã/g, 'D‚ÇÅ(i) = 1/N');
  content = content.replace(/D\s*\n\s*t\s*\n\s*‚Äã\s*\n\s*\(i\)/g, 'D‚Çú(i)');
  
  // Fix broken epsilon notation
  content = content.replace(/œµ\s*\n\s*t\s*\n\s*‚Äã\s*\n\s*=/g, 'œµ‚Çú =');
  content = content.replace(/œµ\s*\n\s*t\s*\n\s*‚Äã\s*\n\s*/g, 'œµ‚Çú');
  
  // Fix broken alpha notation
  content = content.replace(/Œ±\s*\n\s*t\s*\n\s*‚Äã\s*\n\s*=/g, 'Œ±‚Çú =');
  content = content.replace(/Œ±\s*\n\s*t\s*\n\s*‚Äã\s*\n\s*/g, 'Œ±‚Çú');
  
  // Fix broken h notation
  content = content.replace(/h\s*\n\s*t\s*\n\s*‚Äã\s*\n\s*\(x\)/g, 'h‚Çú(x)');
  content = content.replace(/h\s*\n\s*t\s*\n\s*‚Äã\s*\n\s*/g, 'h‚Çú');
  
  // Fix broken H notation
  content = content.replace(/H\s*\n\s*t\s*\n\s*‚Äã\s*\n\s*\(x\)/g, 'H‚Çú(x)');
  content = content.replace(/H\s*\n\s*t\s*\n\s*‚Äã\s*\n\s*/g, 'H‚Çú');
  
  // Fix broken summation notation
  content = content.replace(/i=1\s*\n\s*‚àë\s*\n\s*N\s*\n\s*‚Äã/g, 'Œ£·µ¢‚Çå‚ÇÅ·¥∫');
  content = content.replace(/t=1\s*\n\s*‚àë\s*\n\s*T\s*\n\s*‚Äã/g, 'Œ£‚Çú‚Çå‚ÇÅ·µÄ');
  
  // Fix broken fraction notation
  content = content.replace(/œµ\s*\n\s*t\s*\n\s*‚Äã\s*\n\s*\n\s*1‚àíœµ\s*\n\s*t\s*\n\s*‚Äã/g, 'œµ‚Çú/(1-œµ‚Çú)');
  content = content.replace(/2\s*\n\s*1\s*\n\s*‚Äã\s*\n\s*ln/g, '¬Ω ln');
  
  // Fix broken indicator function
  content = content.replace(/I\(h\s*\n\s*t\s*\n\s*‚Äã\s*\n\s*\(x\s*\n\s*i\s*\n\s*‚Äã\s*\)\s*\n\s*ÓÄ†\s*\n\s*=y\s*\n\s*i\s*\n\s*‚Äã\s*\)/g, 'I(h‚Çú(x·µ¢) ‚â† y·µ¢)');
  
  // Fix broken mathematical symbols
  content = content.replace(/‚àà\{‚àí1,\+1\}/g, '‚àà {-1, +1}');
  content = content.replace(/‚Üí\{‚àí1,\+1\}/g, '‚Üí {-1, +1}');
  
  // Fix broken spacing in formulas
  content = content.replace(/\s*\n\s*‚Äã\s*\n\s*/g, ' ');
  
  return content;
}

// Function to process all MDX files
function processAllFiles() {
  const mlDir = path.join(__dirname, '../content/knowledge/machine-learning');
  
  function processDirectory(dir) {
    const items = fs.readdirSync(dir);
    
    for (const item of items) {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        processDirectory(fullPath);
      } else if (item.endsWith('.mdx')) {
        console.log(`Processing: ${fullPath}`);
        
        try {
          let content = fs.readFileSync(fullPath, 'utf8');
          const originalContent = content;
          
          content = fixMathematicalFormulas(content);
          
          if (content !== originalContent) {
            fs.writeFileSync(fullPath, content, 'utf8');
            console.log(`  ‚úÖ Fixed formulas in: ${item}`);
          } else {
            console.log(`  ‚ÑπÔ∏è  No changes needed: ${item}`);
          }
        } catch (error) {
          console.error(`  ‚ùå Error processing ${item}:`, error.message);
        }
      }
    }
  }
  
  processDirectory(mlDir);
  console.log('\nüéâ Mathematical formula fixing complete!');
}

// Run the script
if (require.main === module) {
  processAllFiles();
}

module.exports = { fixMathematicalFormulas };
