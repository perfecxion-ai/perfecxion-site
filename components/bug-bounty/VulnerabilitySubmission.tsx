'use client'

import { useState, useCallback } from 'react'
import { 
  Upload,
  X,
  AlertTriangle,
  Shield,
  FileText,
  Video,
  Image as ImageIcon,
  CheckCircle,
  Info,
  Star,
  Clock,
  DollarSign
} from 'lucide-react'
import { VulnerabilitySubmission as VulnSubmission } from '@/lib/community-types'
import { BUG_BOUNTY_REWARDS, CONTENT_LIMITS, FILE_UPLOAD_LIMITS } from '@/lib/community-config'

interface VulnerabilitySubmissionProps {
  onSubmit: (submission: Partial<VulnSubmission>) => void
  onCancel?: () => void
}

export default function VulnerabilitySubmission({ onSubmit, onCancel }: VulnerabilitySubmissionProps) {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    affectedSystems: [''],
    severity: 'medium' as 'critical' | 'high' | 'medium' | 'low',
    cvssScore: 5.0,
    impact: '',
    remediation: '',
    steps: [''],
    evidence: [] as File[],
    videoDemo: ''
  })
  
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [dragOver, setDragOver] = useState(false)

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }))
    }
  }

  const handleArrayFieldChange = (field: 'affectedSystems' | 'steps', index: number, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].map((item, i) => i === index ? value : item)
    }))
  }

  const addArrayField = (field: 'affectedSystems' | 'steps') => {
    setFormData(prev => ({
      ...prev,
      [field]: [...prev[field], '']
    }))
  }

  const removeArrayField = (field: 'affectedSystems' | 'steps', index: number) => {
    if (formData[field].length > 1) {
      setFormData(prev => ({
        ...prev,
        [field]: prev[field].filter((_, i) => i !== index)
      }))
    }
  }

  const handleFileUpload = useCallback((files: FileList | null) => {
    if (!files) return

    const validFiles: File[] = []
    const newErrors: string[] = []

    Array.from(files).forEach(file => {
      // Check file size
      if (file.size > FILE_UPLOAD_LIMITS.MAX_FILE_SIZE) {
        newErrors.push(`${file.name} is too large (max ${FILE_UPLOAD_LIMITS.MAX_FILE_SIZE / 1024 / 1024}MB)`)
        return
      }

      // Check file type
      if (!FILE_UPLOAD_LIMITS.ALLOWED_TYPES.includes(file.type as any)) {
        newErrors.push(`${file.name} has unsupported file type`)
        return
      }

      validFiles.push(file)
    })

    if (newErrors.length > 0) {
      setErrors(prev => ({ ...prev, evidence: newErrors.join(', ') }))
    }

    if (validFiles.length > 0) {
      setFormData(prev => ({
        ...prev,
        evidence: [...prev.evidence, ...validFiles].slice(0, FILE_UPLOAD_LIMITS.MAX_FILES_PER_UPLOAD)
      }))
    }
  }, [])

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setDragOver(true)
  }, [])

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setDragOver(false)
  }, [])

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setDragOver(false)
    handleFileUpload(e.dataTransfer.files)
  }, [handleFileUpload])

  const removeFile = (index: number) => {
    setFormData(prev => ({
      ...prev,
      evidence: prev.evidence.filter((_, i) => i !== index)
    }))
  }

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!formData.title.trim()) {
      newErrors.title = 'Title is required'
    } else if (formData.title.length > CONTENT_LIMITS.SUBMISSION_TITLE_MAX) {
      newErrors.title = `Title must be less than ${CONTENT_LIMITS.SUBMISSION_TITLE_MAX} characters`
    }

    if (!formData.description.trim()) {
      newErrors.description = 'Description is required'
    } else if (formData.description.length > CONTENT_LIMITS.SUBMISSION_DESCRIPTION_MAX) {
      newErrors.description = `Description must be less than ${CONTENT_LIMITS.SUBMISSION_DESCRIPTION_MAX} characters`
    }

    if (formData.affectedSystems.every(system => !system.trim())) {
      newErrors.affectedSystems = 'At least one affected system is required'
    }

    if (!formData.impact.trim()) {
      newErrors.impact = 'Impact description is required'
    }

    if (!formData.remediation.trim()) {
      newErrors.remediation = 'Remediation steps are required'
    }

    if (formData.steps.every(step => !step.trim())) {
      newErrors.steps = 'At least one reproduction step is required'
    }

    if (formData.cvssScore < 0 || formData.cvssScore > 10) {
      newErrors.cvssScore = 'CVSS score must be between 0 and 10'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) {
      return
    }

    setIsSubmitting(true)

    try {
      const submission: Partial<VulnSubmission> = {
        title: formData.title.trim(),
        description: formData.description.trim(),
        affectedSystems: formData.affectedSystems.filter(system => system.trim()),
        severity: formData.severity,
        cvssScore: formData.cvssScore,
        impact: formData.impact.trim(),
        remediation: formData.remediation.trim(),
        proofOfConcept: {
          steps: formData.steps.filter(step => step.trim()),
          evidence: formData.evidence,
          videoDemo: formData.videoDemo.trim() || undefined
        },
        status: 'submitted',
        submittedAt: new Date(),
        updatedAt: new Date()
      }

      await onSubmit(submission)
    } catch (error) {
      console.error('Submission error:', error)
    } finally {
      setIsSubmitting(false)
    }
  }

  const getSeverityInfo = (severity: string) => {
    const reward = BUG_BOUNTY_REWARDS[severity as keyof typeof BUG_BOUNTY_REWARDS]
    const colors = {
      critical: 'text-red-600 bg-red-100 dark:bg-red-900 dark:text-red-200',
      high: 'text-orange-600 bg-orange-100 dark:bg-orange-900 dark:text-orange-200',
      medium: 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900 dark:text-yellow-200',
      low: 'text-blue-600 bg-blue-100 dark:bg-blue-900 dark:text-blue-200'
    }
    
    return {
      reward,
      colorClass: colors[severity as keyof typeof colors]
    }
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  const severityInfo = getSeverityInfo(formData.severity)

  return (
    <div className="min-h-screen bg-white dark:bg-gray-900 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border dark:border-gray-700">
          {/* Header */}
          <div className="border-b dark:border-gray-700 p-6">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold dark:text-white">Submit Vulnerability</h1>
                <p className="text-gray-600 dark:text-gray-400 mt-2">
                  Report a security vulnerability and help us improve AI security
                </p>
              </div>
              {onCancel && (
                <button
                  onClick={onCancel}
                  className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                >
                  <X className="w-6 h-6" />
                </button>
              )}
            </div>
          </div>

          <form onSubmit={handleSubmit} className="p-6 space-y-8">
            {/* Basic Information */}
            <div className="space-y-6">
              <h2 className="text-xl font-semibold dark:text-white flex items-center">
                <FileText className="w-5 h-5 mr-2" />
                Basic Information
              </h2>

              {/* Title */}
              <div>
                <label className="block text-sm font-medium dark:text-white mb-2">
                  Vulnerability Title *
                </label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => handleInputChange('title', e.target.value)}
                  placeholder="e.g., SQL Injection in user profile endpoint"
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 dark:bg-gray-700 dark:text-white ${
                    errors.title ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                  }`}
                  maxLength={CONTENT_LIMITS.SUBMISSION_TITLE_MAX}
                />
                {errors.title && (
                  <p className="mt-1 text-sm text-red-600">{errors.title}</p>
                )}
                <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                  {formData.title.length}/{CONTENT_LIMITS.SUBMISSION_TITLE_MAX} characters
                </p>
              </div>

              {/* Description */}
              <div>
                <label className="block text-sm font-medium dark:text-white mb-2">
                  Detailed Description *
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                  placeholder="Provide a detailed description of the vulnerability, including how it was discovered and what makes it exploitable..."
                  rows={6}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 dark:bg-gray-700 dark:text-white resize-none ${
                    errors.description ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                  }`}
                  maxLength={CONTENT_LIMITS.SUBMISSION_DESCRIPTION_MAX}
                />
                {errors.description && (
                  <p className="mt-1 text-sm text-red-600">{errors.description}</p>
                )}
                <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                  {formData.description.length}/{CONTENT_LIMITS.SUBMISSION_DESCRIPTION_MAX} characters
                </p>
              </div>

              {/* Affected Systems */}
              <div>
                <label className="block text-sm font-medium dark:text-white mb-2">
                  Affected Systems *
                </label>
                <div className="space-y-2">
                  {formData.affectedSystems.map((system, index) => (
                    <div key={index} className="flex space-x-2">
                      <input
                        type="url"
                        value={system}
                        onChange={(e) => handleArrayFieldChange('affectedSystems', index, e.target.value)}
                        placeholder="https://api.perfecxion.ai/endpoint"
                        className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 dark:bg-gray-700 dark:text-white"
                      />
                      {formData.affectedSystems.length > 1 && (
                        <button
                          type="button"
                          onClick={() => removeArrayField('affectedSystems', index)}
                          className="px-3 py-2 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      )}
                    </div>
                  ))}
                </div>
                <button
                  type="button"
                  onClick={() => addArrayField('affectedSystems')}
                  className="mt-2 text-sm text-red-600 hover:text-red-700 dark:text-red-400"
                >
                  + Add Another System
                </button>
                {errors.affectedSystems && (
                  <p className="mt-1 text-sm text-red-600">{errors.affectedSystems}</p>
                )}
              </div>
            </div>

            {/* Severity Assessment */}
            <div className="space-y-6">
              <h2 className="text-xl font-semibold dark:text-white flex items-center">
                <AlertTriangle className="w-5 h-5 mr-2" />
                Severity Assessment
              </h2>

              <div className="grid md:grid-cols-2 gap-6">
                {/* Severity */}
                <div>
                  <label className="block text-sm font-medium dark:text-white mb-2">
                    Severity Level *
                  </label>
                  <select
                    value={formData.severity}
                    onChange={(e) => handleInputChange('severity', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 dark:bg-gray-700 dark:text-white"
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                    <option value="critical">Critical</option>
                  </select>
                  
                  <div className={`mt-2 p-3 rounded-lg ${severityInfo.colorClass}`}>
                    <div className="flex items-center justify-between">
                      <span className="font-semibold capitalize">{formData.severity}</span>
                      <div className="flex items-center space-x-1">
                        <DollarSign className="w-4 h-4" />
                        <span className="font-semibold">
                          ${severityInfo.reward.min.toLocaleString()} - ${severityInfo.reward.max.toLocaleString()}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* CVSS Score */}
                <div>
                  <label className="block text-sm font-medium dark:text-white mb-2">
                    CVSS Score *
                  </label>
                  <input
                    type="number"
                    min="0"
                    max="10"
                    step="0.1"
                    value={formData.cvssScore}
                    onChange={(e) => handleInputChange('cvssScore', parseFloat(e.target.value))}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 dark:bg-gray-700 dark:text-white ${
                      errors.cvssScore ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                    }`}
                  />
                  {errors.cvssScore && (
                    <p className="mt-1 text-sm text-red-600">{errors.cvssScore}</p>
                  )}
                  <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                    Use CVSS 3.1 scoring system (0.0 - 10.0)
                  </p>
                </div>
              </div>

              {/* Impact */}
              <div>
                <label className="block text-sm font-medium dark:text-white mb-2">
                  Impact Description *
                </label>
                <textarea
                  value={formData.impact}
                  onChange={(e) => handleInputChange('impact', e.target.value)}
                  placeholder="Describe the potential impact if this vulnerability were exploited (data exposure, service disruption, privilege escalation, etc.)"
                  rows={4}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 dark:bg-gray-700 dark:text-white resize-none ${
                    errors.impact ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                  }`}
                />
                {errors.impact && (
                  <p className="mt-1 text-sm text-red-600">{errors.impact}</p>
                )}
              </div>

              {/* Remediation */}
              <div>
                <label className="block text-sm font-medium dark:text-white mb-2">
                  Suggested Remediation *
                </label>
                <textarea
                  value={formData.remediation}
                  onChange={(e) => handleInputChange('remediation', e.target.value)}
                  placeholder="Provide specific steps or recommendations to fix this vulnerability"
                  rows={4}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 dark:bg-gray-700 dark:text-white resize-none ${
                    errors.remediation ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                  }`}
                />
                {errors.remediation && (
                  <p className="mt-1 text-sm text-red-600">{errors.remediation}</p>
                )}
              </div>
            </div>

            {/* Proof of Concept */}
            <div className="space-y-6">
              <h2 className="text-xl font-semibold dark:text-white flex items-center">
                <Shield className="w-5 h-5 mr-2" />
                Proof of Concept
              </h2>

              {/* Reproduction Steps */}
              <div>
                <label className="block text-sm font-medium dark:text-white mb-2">
                  Reproduction Steps *
                </label>
                <div className="space-y-2">
                  {formData.steps.map((step, index) => (
                    <div key={index} className="flex space-x-2">
                      <div className="flex-shrink-0 w-8 h-10 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center text-sm font-semibold dark:text-white">
                        {index + 1}
                      </div>
                      <textarea
                        value={step}
                        onChange={(e) => handleArrayFieldChange('steps', index, e.target.value)}
                        placeholder={`Step ${index + 1}: Describe what to do...`}
                        rows={2}
                        className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 dark:bg-gray-700 dark:text-white resize-none"
                      />
                      {formData.steps.length > 1 && (
                        <button
                          type="button"
                          onClick={() => removeArrayField('steps', index)}
                          className="px-3 py-2 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      )}
                    </div>
                  ))}
                </div>
                <button
                  type="button"
                  onClick={() => addArrayField('steps')}
                  className="mt-2 text-sm text-red-600 hover:text-red-700 dark:text-red-400"
                >
                  + Add Another Step
                </button>
                {errors.steps && (
                  <p className="mt-1 text-sm text-red-600">{errors.steps}</p>
                )}
              </div>

              {/* File Upload */}
              <div>
                <label className="block text-sm font-medium dark:text-white mb-2">
                  Evidence Files
                </label>
                <div
                  className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                    dragOver
                      ? 'border-red-400 bg-red-50 dark:bg-red-900/20'
                      : 'border-gray-300 dark:border-gray-600 hover:border-red-400 hover:bg-red-50 dark:hover:bg-red-900/20'
                  }`}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                  onDrop={handleDrop}
                >
                  <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-lg font-medium dark:text-white mb-2">
                    Drag and drop files here, or click to browse
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                    Screenshots, logs, videos, or other evidence files
                  </p>
                  <input
                    type="file"
                    multiple
                    onChange={(e) => handleFileUpload(e.target.files)}
                    className="hidden"
                    id="file-upload"
                    accept={FILE_UPLOAD_LIMITS.ALLOWED_TYPES.join(',')}
                  />
                  <label
                    htmlFor="file-upload"
                    className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors cursor-pointer inline-block"
                  >
                    Choose Files
                  </label>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                    Max {FILE_UPLOAD_LIMITS.MAX_FILE_SIZE / 1024 / 1024}MB per file, 
                    {FILE_UPLOAD_LIMITS.MAX_FILES_PER_UPLOAD} files max
                  </p>
                </div>

                {errors.evidence && (
                  <p className="mt-1 text-sm text-red-600">{errors.evidence}</p>
                )}

                {/* Uploaded Files */}
                {formData.evidence.length > 0 && (
                  <div className="mt-4 space-y-2">
                    <h4 className="font-medium dark:text-white">Uploaded Files:</h4>
                    {formData.evidence.map((file, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                        <div className="flex items-center space-x-3">
                          {file.type.startsWith('image/') ? (
                            <ImageIcon className="w-5 h-5 text-blue-600" />
                          ) : file.type.startsWith('video/') ? (
                            <Video className="w-5 h-5 text-purple-600" />
                          ) : (
                            <FileText className="w-5 h-5 text-gray-600" />
                          )}
                          <div>
                            <p className="font-medium dark:text-white">{file.name}</p>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                              {formatFileSize(file.size)}
                            </p>
                          </div>
                        </div>
                        <button
                          type="button"
                          onClick={() => removeFile(index)}
                          className="text-red-600 hover:text-red-700 p-1"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Video Demo URL */}
              <div>
                <label className="block text-sm font-medium dark:text-white mb-2">
                  Video Demonstration (Optional)
                </label>
                <input
                  type="url"
                  value={formData.videoDemo}
                  onChange={(e) => handleInputChange('videoDemo', e.target.value)}
                  placeholder="https://youtube.com/watch?v=... or https://drive.google.com/..."
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 dark:bg-gray-700 dark:text-white"
                />
                <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                  Link to a video demonstration of the vulnerability
                </p>
              </div>
            </div>

            {/* Important Notice */}
            <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-6">
              <div className="flex items-start space-x-3">
                <Info className="w-6 h-6 text-yellow-600 dark:text-yellow-400 flex-shrink-0 mt-0.5" />
                <div>
                  <h3 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-2">
                    Important Submission Guidelines
                  </h3>
                  <ul className="text-sm text-yellow-700 dark:text-yellow-300 space-y-1">
                    <li>• Do not test on production systems without explicit permission</li>
                    <li>• Follow responsible disclosure - do not share details publicly</li>
                    <li>• Include sufficient detail for our security team to reproduce</li>
                    <li>• Be patient - we will respond within 5 business days</li>
                  </ul>
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <div className="flex items-center justify-between pt-6 border-t dark:border-gray-700">
              <div className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
                <CheckCircle className="w-4 h-4" />
                <span>Your submission will be encrypted and sent securely</span>
              </div>
              
              <div className="flex space-x-4">
                {onCancel && (
                  <button
                    type="button"
                    onClick={onCancel}
                    className="px-6 py-3 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                  >
                    Cancel
                  </button>
                )}
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="px-8 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-semibold"
                >
                  {isSubmitting ? 'Submitting...' : 'Submit Vulnerability'}
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}