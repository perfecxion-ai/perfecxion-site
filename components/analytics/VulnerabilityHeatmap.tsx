'use client'

import { useState, useEffect } from 'react'
import { AlertTriangle, Shield, Server, Database, Globe, Lock } from 'lucide-react'
import { TimePeriod, AnalyticsFilters, VulnerabilitySeverity } from '@/lib/analytics-types'

interface VulnerabilityHeatmapProps {
  timeRange: TimePeriod
  filters: AnalyticsFilters
}

interface SystemData {
  id: string
  name: string
  type: 'web_server' | 'database' | 'api_gateway' | 'ml_pipeline' | 'auth_service' | 'storage'
  vulnerabilities: {
    critical: number
    high: number
    medium: number
    low: number
    info: number
  }
  riskScore: number
  lastScan: string
  status: 'online' | 'warning' | 'critical' | 'offline'
}

interface HeatmapCell {
  system: SystemData
  severity: VulnerabilitySeverity
  count: number
  intensity: number // 0-1 for color intensity
}

export default function VulnerabilityHeatmap({ timeRange, filters }: VulnerabilityHeatmapProps) {
  const [systemsData, setSystemsData] = useState<SystemData[]>([])
  const [loading, setLoading] = useState(true)
  const [selectedSeverity, setSelectedSeverity] = useState<VulnerabilitySeverity | 'all'>('all')
  const [hoveredCell, setHoveredCell] = useState<HeatmapCell | null>(null)

  // Generate mock systems data
  const generateSystemsData = (): SystemData[] => {
    const systems = [
      { id: 'web-01', name: 'Web Server 01', type: 'web_server' as const },
      { id: 'web-02', name: 'Web Server 02', type: 'web_server' as const },
      { id: 'api-01', name: 'API Gateway', type: 'api_gateway' as const },
      { id: 'db-01', name: 'Main Database', type: 'database' as const },
      { id: 'db-02', name: 'Analytics DB', type: 'database' as const },
      { id: 'ml-01', name: 'ML Pipeline', type: 'ml_pipeline' as const },
      { id: 'auth-01', name: 'Auth Service', type: 'auth_service' as const },
      { id: 'storage-01', name: 'File Storage', type: 'storage' as const },
      { id: 'web-03', name: 'Web Server 03', type: 'web_server' as const },
      { id: 'api-02', name: 'Internal API', type: 'api_gateway' as const }
    ]

    return systems.map(system => {
      const critical = Math.floor(Math.random() * 5)
      const high = Math.floor(Math.random() * 8)
      const medium = Math.floor(Math.random() * 12)
      const low = Math.floor(Math.random() * 15)
      const info = Math.floor(Math.random() * 10)
      const totalVulns = critical + high + medium + low + info
      const riskScore = (critical * 10 + high * 7 + medium * 4 + low * 1) / Math.max(1, totalVulns)

      return {
        ...system,
        vulnerabilities: { critical, high, medium, low, info },
        riskScore,
        lastScan: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000).toISOString(),
        status: critical > 2 ? 'critical' : 
                critical > 0 || high > 4 ? 'warning' : 
                totalVulns === 0 ? 'online' : 'online'
      }
    })
  }

  useEffect(() => {
    setLoading(true)
    setTimeout(() => {
      setSystemsData(generateSystemsData())
      setLoading(false)
    }, 500)
  }, [timeRange, filters])

  const getSystemIcon = (type: SystemData['type']) => {
    switch (type) {
      case 'web_server': return <Globe className="w-4 h-4" />
      case 'database': return <Database className="w-4 h-4" />
      case 'api_gateway': return <Server className="w-4 h-4" />
      case 'ml_pipeline': return <AlertTriangle className="w-4 h-4" />
      case 'auth_service': return <Lock className="w-4 h-4" />
      case 'storage': return <Shield className="w-4 h-4" />
      default: return <Server className="w-4 h-4" />
    }
  }

  const getSeverityColor = (severity: VulnerabilitySeverity): string => {
    switch (severity) {
      case 'critical': return 'bg-red-500'
      case 'high': return 'bg-orange-500'
      case 'medium': return 'bg-yellow-500'
      case 'low': return 'bg-blue-500'
      default: return 'bg-gray-300'
    }
  }

  const getIntensityOpacity = (count: number, maxCount: number): number => {
    if (maxCount === 0) return 0.1
    return Math.max(0.1, Math.min(1, (count / maxCount) * 0.9 + 0.1))
  }

  const severities: VulnerabilitySeverity[] = ['critical', 'high', 'medium', 'low', 'info']
  const maxCounts = severities.reduce((acc, severity) => {
    acc[severity] = Math.max(...systemsData.map(s => s.vulnerabilities[severity]))
    return acc
  }, {} as Record<VulnerabilitySeverity, number>)

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  const filteredSeverities = selectedSeverity === 'all' ? severities : [selectedSeverity as VulnerabilitySeverity]

  return (
    <div className="space-y-4">
      {/* Controls */}
      <div className="flex flex-wrap items-center gap-2">
        <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
          Filter by severity:
        </span>
        <button
          onClick={() => setSelectedSeverity('all')}
          className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${
            selectedSeverity === 'all'
              ? 'bg-gray-600 text-white'
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'
          }`}
        >
          All
        </button>
        {severities.map(severity => (
          <button
            key={severity}
            onClick={() => setSelectedSeverity(severity)}
            className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${
              selectedSeverity === severity
                ? severity === 'critical' ? 'bg-red-600 text-white' :
                  severity === 'high' ? 'bg-orange-600 text-white' :
                  severity === 'medium' ? 'bg-yellow-600 text-white' :
                  'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'
            }`}
          >
            {severity.charAt(0).toUpperCase() + severity.slice(1)}
          </button>
        ))}
      </div>

      {/* Heatmap Grid */}
      <div className="relative">
        {/* Column Headers */}
        <div className="grid grid-cols-[200px_repeat(4,1fr)] gap-1 mb-2">
          <div></div>
          {filteredSeverities.map(severity => (
            <div key={severity} className="text-center">
              <div className={`inline-flex items-center px-2 py-1 rounded text-xs font-medium text-white ${getSeverityColor(severity)}`}>
                {severity.charAt(0).toUpperCase() + severity.slice(1)}
              </div>
            </div>
          ))}
        </div>

        {/* Heatmap Rows */}
        <div className="space-y-1">
          {systemsData.map(system => (
            <div key={system.id} className="grid grid-cols-[200px_repeat(4,1fr)] gap-1">
              {/* System Name */}
              <div className="flex items-center gap-2 px-3 py-2 bg-gray-50 dark:bg-gray-700 rounded text-sm">
                <div className={`${
                  system.status === 'critical' ? 'text-red-600' :
                  system.status === 'warning' ? 'text-yellow-600' :
                  system.status === 'online' ? 'text-green-600' : 'text-gray-600'
                }`}>
                  {getSystemIcon(system.type)}
                </div>
                <span className="font-medium text-gray-900 dark:text-white truncate">
                  {system.name}
                </span>
              </div>

              {/* Vulnerability Cells */}
              {filteredSeverities.map(severity => {
                const count = system.vulnerabilities[severity]
                const intensity = getIntensityOpacity(count, maxCounts[severity])
                const cell: HeatmapCell = { system, severity, count, intensity }

                return (
                  <div
                    key={`${system.id}-${severity}`}
                    className="relative h-12 rounded cursor-pointer transition-all hover:scale-105 hover:shadow-md"
                    style={{
                      backgroundColor: count === 0 ? '#f3f4f6' : getSeverityColor(severity).replace('bg-', ''),
                      opacity: count === 0 ? 0.3 : intensity
                    }}
                    onMouseEnter={() => setHoveredCell(cell)}
                    onMouseLeave={() => setHoveredCell(null)}
                  >
                    <div className="absolute inset-0 flex items-center justify-center">
                      <span className={`font-bold text-sm ${
                        count === 0 ? 'text-gray-500' : 'text-white'
                      }`}>
                        {count}
                      </span>
                    </div>
                  </div>
                )
              })}
            </div>
          ))}
        </div>
      </div>

      {/* Tooltip */}
      {hoveredCell && (
        <div className="absolute z-10 p-3 bg-gray-900 text-white rounded-lg shadow-lg text-sm pointer-events-none">
          <div className="font-semibold">{hoveredCell.system.name}</div>
          <div className="text-gray-300 capitalize">
            {hoveredCell.severity} Vulnerabilities: {hoveredCell.count}
          </div>
          <div className="text-gray-300">
            Risk Score: {hoveredCell.system.riskScore.toFixed(1)}/10
          </div>
          <div className="text-gray-300">
            Last Scan: {new Date(hoveredCell.system.lastScan).toLocaleDateString()}
          </div>
        </div>
      )}

      {/* Legend and Summary */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
        {/* Legend */}
        <div>
          <h4 className="font-medium text-gray-900 dark:text-white mb-2">Legend</h4>
          <div className="space-y-2">
            <div className="flex items-center gap-2 text-sm">
              <div className="w-4 h-4 bg-red-500 rounded opacity-90"></div>
              <span className="text-gray-600 dark:text-gray-400">High vulnerability density</span>
            </div>
            <div className="flex items-center gap-2 text-sm">
              <div className="w-4 h-4 bg-red-500 rounded opacity-30"></div>
              <span className="text-gray-600 dark:text-gray-400">Low vulnerability density</span>
            </div>
            <div className="flex items-center gap-2 text-sm">
              <div className="w-4 h-4 bg-gray-300 rounded opacity-30"></div>
              <span className="text-gray-600 dark:text-gray-400">No vulnerabilities</span>
            </div>
          </div>
        </div>

        {/* Summary Statistics */}
        <div>
          <h4 className="font-medium text-gray-900 dark:text-white mb-2">Summary</h4>
          <div className="grid grid-cols-4 gap-2 text-sm">
            {severities.map(severity => {
              const total = systemsData.reduce((sum, sys) => sum + sys.vulnerabilities[severity], 0)
              return (
                <div key={severity} className="text-center">
                  <div className={`w-3 h-3 ${getSeverityColor(severity)} rounded mx-auto mb-1`}></div>
                  <div className="font-medium text-gray-900 dark:text-white">{total}</div>
                  <div className="text-xs text-gray-500 dark:text-gray-400 capitalize">{severity}</div>
                </div>
              )
            })}
          </div>
        </div>
      </div>
    </div>
  )
}