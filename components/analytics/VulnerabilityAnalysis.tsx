'use client'

import { useState, useEffect } from 'react'
import { Search, Filter, AlertTriangle, TrendingUp, Clock, Shield, FileText, Download, ExternalLink } from 'lucide-react'
import { VulnerabilityData, CVSSScore, RiskPriority, TimePeriod, VulnerabilitySeverity, VulnerabilityStatus } from '@/lib/analytics-types'
import DashboardWidget from './DashboardWidget'

interface VulnerabilityWithRisk extends Omit<VulnerabilityData, 'cvssScore'> {
  cvssScore: CVSSScore
  riskPriority: RiskPriority
}

export default function VulnerabilityAnalysis() {
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityWithRisk[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [severityFilter, setSeverityFilter] = useState<VulnerabilitySeverity | 'all'>('all')
  const [statusFilter, setStatusFilter] = useState<VulnerabilityStatus | 'all'>('all')
  const [selectedVulnerability, setSelectedVulnerability] = useState<VulnerabilityWithRisk | null>(null)
  
  // Generate mock vulnerability data
  const generateVulnerabilityData = (): VulnerabilityWithRisk[] => {
    const severities: VulnerabilitySeverity[] = ['critical', 'high', 'medium', 'low', 'info']
    const statuses: VulnerabilityStatus[] = ['open', 'in_progress', 'resolved', 'false_positive', 'accepted_risk']
    const categories = ['injection', 'broken_auth', 'sensitive_data', 'xss', 'security_misconfig']
    const systems = ['web-server-01', 'api-gateway', 'main-database', 'ml-pipeline', 'auth-service']
    
    const vulnerabilityTemplates = [
      { title: 'SQL Injection in User Authentication', category: 'injection', cwe: 'CWE-89' },
      { title: 'Cross-Site Scripting (XSS) in Search Form', category: 'xss', cwe: 'CWE-79' },
      { title: 'Broken Authentication Token Validation', category: 'broken_auth', cwe: 'CWE-287' },
      { title: 'Sensitive Data Exposure in API Response', category: 'sensitive_data', cwe: 'CWE-200' },
      { title: 'Security Misconfiguration in CORS Policy', category: 'security_misconfig', cwe: 'CWE-16' },
      { title: 'Command Injection in File Upload', category: 'injection', cwe: 'CWE-78' },
      { title: 'Insecure Direct Object References', category: 'broken_access', cwe: 'CWE-639' },
      { title: 'XML External Entity (XXE) Processing', category: 'xxe', cwe: 'CWE-611' },
      { title: 'Insecure Deserialization Vulnerability', category: 'insecure_deserialization', cwe: 'CWE-502' },
      { title: 'Using Components with Known Vulnerabilities', category: 'known_vulnerabilities', cwe: 'CWE-1104' }
    ]

    return vulnerabilityTemplates.map((template, index) => {
      const severity = severities[Math.floor(Math.random() * severities.length)]
      const status = statuses[Math.floor(Math.random() * statuses.length)]
      const systemId = systems[Math.floor(Math.random() * systems.length)]
      const baseScore = severity === 'critical' ? 9.0 + Math.random() :
                       severity === 'high' ? 7.0 + Math.random() * 2 :
                       severity === 'medium' ? 4.0 + Math.random() * 3 :
                       severity === 'low' ? 0.1 + Math.random() * 3.9 :
                       0.0 + Math.random() * 3.9

      const vulnerability: VulnerabilityWithRisk = {
        id: `vuln-${index + 1}`,
        systemId,
        systemName: systemId.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase()),
        title: template.title,
        description: `${template.title} has been identified in ${systemId}. This vulnerability could allow attackers to compromise system security.`,
        severity,
        cvssVector: `CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H`,
        discoveredAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
        updatedAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),
        status,
        exploitability: 'functional',
        impact: 'complete',
        category: template.category as any,
        cweId: template.cwe,
        affectedComponents: [systemId, 'user-interface', 'authentication-module'],
        remediationSteps: [
          {
            id: `step-${index}-1`,
            title: 'Immediate Mitigation',
            description: 'Apply temporary security controls to reduce immediate risk',
            priority: 'critical',
            estimatedEffort: '2-4 hours',
            status: status === 'resolved' ? 'completed' : 'pending'
          },
          {
            id: `step-${index}-2`,
            title: 'Code Review and Fix',
            description: 'Review vulnerable code and implement security fixes',
            priority: 'high',
            estimatedEffort: '1-2 days',
            status: status === 'resolved' ? 'completed' : status === 'in_progress' ? 'in_progress' : 'pending'
          },
          {
            id: `step-${index}-3`,
            title: 'Security Testing',
            description: 'Conduct comprehensive security testing to verify fix',
            priority: 'medium',
            estimatedEffort: '4-8 hours',
            status: status === 'resolved' ? 'completed' : 'pending'
          }
        ],
        references: [
          `https://cwe.mitre.org/data/definitions/${template.cwe.split('-')[1]}.html`,
          'https://owasp.org/www-project-top-ten/',
          'https://nvd.nist.gov/vuln-metrics/cvss'
        ],
        tags: [severity, template.category, systemId],
        cvssScore: {
          vulnerabilityId: `vuln-${index + 1}`,
          version: '3.1',
          baseScore,
          vector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
          metrics: {
            attackVector: 'Network',
            attackComplexity: 'Low',
            privilegesRequired: 'None',
            userInteraction: 'None',
            scope: 'Unchanged',
            confidentialityImpact: 'High',
            integrityImpact: 'High',
            availabilityImpact: 'High'
          },
          calculatedAt: new Date().toISOString()
        },
        riskPriority: {
          vulnerabilityId: `vuln-${index + 1}`,
          riskScore: baseScore * 10,
          businessImpact: severity === 'critical' ? 'critical' : severity === 'high' ? 'high' : 'medium',
          exploitLikelihood: 'high',
          remediationComplexity: 'moderate',
          complianceImpact: severity === 'critical' || severity === 'high' ? 'major' : 'minor',
          priority: severity === 'critical' ? 'p0' : severity === 'high' ? 'p1' : severity === 'medium' ? 'p2' : 'p3',
          justification: `${severity} severity vulnerability with ${severity === 'critical' ? 'immediate' : 'high'} business impact`,
          calculatedAt: new Date().toISOString()
        }
      }

      return vulnerability
    })
  }

  useEffect(() => {
    setLoading(true)
    setTimeout(() => {
      setVulnerabilities(generateVulnerabilityData())
      setLoading(false)
    }, 1000)
  }, [])

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = searchTerm === '' || 
      vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.systemName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.description.toLowerCase().includes(searchTerm.toLowerCase())
    
    const matchesSeverity = severityFilter === 'all' || vuln.severity === severityFilter
    const matchesStatus = statusFilter === 'all' || vuln.status === statusFilter
    
    return matchesSearch && matchesSeverity && matchesStatus
  })

  const getSeverityColor = (severity: VulnerabilitySeverity) => {
    switch (severity) {
      case 'critical': return 'bg-red-500 text-white'
      case 'high': return 'bg-orange-500 text-white'
      case 'medium': return 'bg-yellow-500 text-white'
      case 'low': return 'bg-blue-500 text-white'
      case 'info': return 'bg-gray-500 text-white'
      default: return 'bg-gray-500 text-white'
    }
  }

  const getStatusColor = (status: VulnerabilityStatus) => {
    switch (status) {
      case 'open': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300'
      case 'in_progress': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300'
      case 'resolved': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300'
      case 'false_positive': return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300'
      case 'accepted_risk': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-300'
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300'
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'p0': return 'bg-red-600 text-white'
      case 'p1': return 'bg-orange-600 text-white'
      case 'p2': return 'bg-yellow-600 text-white'
      case 'p3': return 'bg-blue-600 text-white'
      case 'p4': return 'bg-gray-600 text-white'
      default: return 'bg-gray-600 text-white'
    }
  }

  const severityStats = vulnerabilities.reduce((acc, vuln) => {
    acc[vuln.severity] = (acc[vuln.severity] || 0) + 1
    return acc
  }, {} as Record<VulnerabilitySeverity, number>)

  const statusStats = vulnerabilities.reduce((acc, vuln) => {
    acc[vuln.status] = (acc[vuln.status] || 0) + 1
    return acc
  }, {} as Record<VulnerabilityStatus, number>)

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Summary Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Total Vulnerabilities</h3>
          <p className="text-3xl font-bold text-gray-900 dark:text-white">{vulnerabilities.length}</p>
          <div className="flex items-center text-sm text-green-600 mt-1">
            <TrendingUp className="w-4 h-4 mr-1" />
            <span>12% reduction</span>
          </div>
        </div>

        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Critical & High</h3>
          <p className="text-3xl font-bold text-red-600">
            {(severityStats.critical || 0) + (severityStats.high || 0)}
          </p>
          <div className="flex items-center text-sm text-red-600 mt-1">
            <AlertTriangle className="w-4 h-4 mr-1" />
            <span>Requires immediate attention</span>
          </div>
        </div>

        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Avg Resolution Time</h3>
          <p className="text-3xl font-bold text-blue-600">2.3 days</p>
          <div className="flex items-center text-sm text-green-600 mt-1">
            <Clock className="w-4 h-4 mr-1" />
            <span>15% faster than last month</span>
          </div>
        </div>

        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Security Score</h3>
          <p className="text-3xl font-bold text-green-600">8.7/10</p>
          <div className="flex items-center text-sm text-green-600 mt-1">
            <Shield className="w-4 h-4 mr-1" />
            <span>Above industry average</span>
          </div>
        </div>
      </div>

      {/* Filters and Search */}
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Search vulnerabilities..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>
          
          <div className="flex gap-2">
            <select
              value={severityFilter}
              onChange={(e) => setSeverityFilter(e.target.value as VulnerabilitySeverity | 'all')}
              className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
              <option value="info">Info</option>
            </select>
            
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value as VulnerabilityStatus | 'all')}
              className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">All Statuses</option>
              <option value="open">Open</option>
              <option value="in_progress">In Progress</option>
              <option value="resolved">Resolved</option>
              <option value="false_positive">False Positive</option>
              <option value="accepted_risk">Accepted Risk</option>
            </select>

            <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center gap-2">
              <Download className="w-4 h-4" />
              Export
            </button>
          </div>
        </div>
      </div>

      {/* Vulnerability List */}
      <DashboardWidget
        title="Vulnerability Details"
        description={`Showing ${filteredVulnerabilities.length} of ${vulnerabilities.length} vulnerabilities`}
        fullWidth={true}
      >
        <div className="space-y-4">
          {filteredVulnerabilities.map((vulnerability) => (
            <div
              key={vulnerability.id}
              className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer"
              onClick={() => setSelectedVulnerability(vulnerability)}
            >
              <div className="flex items-start justify-between">
                <div className="flex-1 min-w-0">
                  <div className="flex items-center gap-3 mb-2">
                    <span className={`px-2 py-1 text-xs font-bold rounded ${getSeverityColor(vulnerability.severity)}`}>
                      {vulnerability.severity.toUpperCase()}
                    </span>
                    <span className={`px-2 py-1 text-xs font-medium rounded ${getStatusColor(vulnerability.status)}`}>
                      {vulnerability.status.replace('_', ' ').toUpperCase()}
                    </span>
                    <span className={`px-2 py-1 text-xs font-medium rounded ${getPriorityColor(vulnerability.riskPriority.priority)}`}>
                      {vulnerability.riskPriority.priority.toUpperCase()}
                    </span>
                    {vulnerability.cweId && (
                      <span className="px-2 py-1 text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 rounded">
                        {vulnerability.cweId}
                      </span>
                    )}
                  </div>
                  
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-1">
                    {vulnerability.title}
                  </h3>
                  
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                    {vulnerability.description}
                  </p>
                  
                  <div className="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                    <span>System: {vulnerability.systemName}</span>
                    <span>CVSS: {vulnerability.cvssScore.baseScore.toFixed(1)}</span>
                    <span>Risk Score: {vulnerability.riskPriority.riskScore.toFixed(0)}</span>
                    <span>Discovered: {new Date(vulnerability.discoveredAt).toLocaleDateString()}</span>
                  </div>
                </div>
                
                <div className="flex items-center gap-2 ml-4">
                  <button className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700">
                    <FileText className="w-4 h-4" />
                  </button>
                  <button className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700">
                    <ExternalLink className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </DashboardWidget>

      {/* Detailed View Modal */}
      {selectedVulnerability && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
                  Vulnerability Details
                </h2>
                <button
                  onClick={() => setSelectedVulnerability(null)}
                  className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                >
                  ✕
                </button>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Main Details */}
                <div className="lg:col-span-2 space-y-6">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                      {selectedVulnerability.title}
                    </h3>
                    <p className="text-gray-600 dark:text-gray-400 mb-4">
                      {selectedVulnerability.description}
                    </p>
                  </div>

                  {/* CVSS Information */}
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-3">CVSS v3.1 Score</h4>
                    <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                      <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                          <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Base Score</span>
                          <div className={`text-2xl font-bold ${
                            selectedVulnerability.cvssScore.baseScore >= 9 ? 'text-red-600' :
                            selectedVulnerability.cvssScore.baseScore >= 7 ? 'text-orange-600' :
                            selectedVulnerability.cvssScore.baseScore >= 4 ? 'text-yellow-600' :
                            'text-blue-600'
                          }`}>
                            {selectedVulnerability.cvssScore.baseScore.toFixed(1)}
                          </div>
                        </div>
                        <div>
                          <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Vector</span>
                          <div className="text-sm font-mono text-gray-900 dark:text-white">
                            {selectedVulnerability.cvssScore.vector}
                          </div>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-2 gap-2 text-sm">
                        <div>Attack Vector: {selectedVulnerability.cvssScore.metrics.attackVector}</div>
                        <div>Attack Complexity: {selectedVulnerability.cvssScore.metrics.attackComplexity}</div>
                        <div>Privileges Required: {selectedVulnerability.cvssScore.metrics.privilegesRequired}</div>
                        <div>User Interaction: {selectedVulnerability.cvssScore.metrics.userInteraction}</div>
                        <div>Confidentiality: {selectedVulnerability.cvssScore.metrics.confidentialityImpact}</div>
                        <div>Integrity: {selectedVulnerability.cvssScore.metrics.integrityImpact}</div>
                      </div>
                    </div>
                  </div>

                  {/* Remediation Steps */}
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-3">Remediation Steps</h4>
                    <div className="space-y-3">
                      {selectedVulnerability.remediationSteps.map((step, index) => (
                        <div key={step.id} className="flex items-start gap-3">
                          <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold text-white ${
                            step.status === 'completed' ? 'bg-green-500' :
                            step.status === 'in_progress' ? 'bg-blue-500' :
                            'bg-gray-400'
                          }`}>
                            {index + 1}
                          </div>
                          <div className="flex-1">
                            <h5 className="font-medium text-gray-900 dark:text-white">{step.title}</h5>
                            <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">{step.description}</p>
                            <div className="flex items-center gap-2 text-xs">
                              <span className={`px-2 py-1 rounded ${
                                step.priority === 'critical' ? 'bg-red-100 text-red-800' :
                                step.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                                'bg-yellow-100 text-yellow-800'
                              }`}>
                                {step.priority}
                              </span>
                              <span className="text-gray-500">{step.estimatedEffort}</span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Sidebar */}
                <div className="space-y-6">
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-3">Risk Assessment</h4>
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600 dark:text-gray-400">Priority</span>
                        <span className={`px-2 py-1 text-xs font-medium rounded ${getPriorityColor(selectedVulnerability.riskPriority.priority)}`}>
                          {selectedVulnerability.riskPriority.priority.toUpperCase()}
                        </span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600 dark:text-gray-400">Business Impact</span>
                        <span className="text-sm font-medium text-gray-900 dark:text-white">
                          {selectedVulnerability.riskPriority.businessImpact}
                        </span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600 dark:text-gray-400">Exploit Likelihood</span>
                        <span className="text-sm font-medium text-gray-900 dark:text-white">
                          {selectedVulnerability.riskPriority.exploitLikelihood}
                        </span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600 dark:text-gray-400">Compliance Impact</span>
                        <span className="text-sm font-medium text-gray-900 dark:text-white">
                          {selectedVulnerability.riskPriority.complianceImpact}
                        </span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-3">System Information</h4>
                    <div className="space-y-2 text-sm">
                      <div>
                        <span className="text-gray-600 dark:text-gray-400">System:</span>
                        <span className="ml-2 font-medium text-gray-900 dark:text-white">{selectedVulnerability.systemName}</span>
                      </div>
                      <div>
                        <span className="text-gray-600 dark:text-gray-400">Category:</span>
                        <span className="ml-2 font-medium text-gray-900 dark:text-white">{selectedVulnerability.category}</span>
                      </div>
                      <div>
                        <span className="text-gray-600 dark:text-gray-400">Discovered:</span>
                        <span className="ml-2 font-medium text-gray-900 dark:text-white">
                          {new Date(selectedVulnerability.discoveredAt).toLocaleDateString()}
                        </span>
                      </div>
                      <div>
                        <span className="text-gray-600 dark:text-gray-400">Last Updated:</span>
                        <span className="ml-2 font-medium text-gray-900 dark:text-white">
                          {new Date(selectedVulnerability.updatedAt).toLocaleDateString()}
                        </span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-3">References</h4>
                    <div className="space-y-2">
                      {selectedVulnerability.references.map((ref, index) => (
                        <a
                          key={index}
                          href={ref}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center gap-2 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-sm"
                        >
                          <ExternalLink className="w-3 h-3" />
                          {ref.includes('cwe.mitre.org') ? 'CWE Database' :
                           ref.includes('owasp.org') ? 'OWASP Top 10' :
                           ref.includes('nvd.nist.gov') ? 'NIST NVD' : 'Reference'}
                        </a>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}